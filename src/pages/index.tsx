import type { InferGetStaticPropsType, NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';

import { ToggleButton, ToggleButtonGroup } from '@mui/material';
import React, { useEffect, useState } from 'react';
import { NetworkStatus, useQuery } from '@apollo/client';
import {
  ReactionContent,
  useAddReactionMutation,
  useRemoveReactionMutation,
  useRepositoryQuery,
} from '../__generated__/graphql';

// type Props = InferGetStaticPropsType<typeof getStaticProps>;

const Home: NextPage = () => {
    // const [reactions, setReactions] = useState<(keyof typeof ReactionContent)[]>(() => []);

    const { data, refetch, loading, networkStatus } = useRepositoryQuery();
    const [addReactionMutation] = useAddReactionMutation();
    const [removeReactionMutation] = useRemoveReactionMutation();
    console.log(data);

    let reactions: (keyof typeof ReactionContent)[] = [];
    if (data) {
      // console.log(data);
      const fetchReactions = data.repository?.issue?.reactions?.edges?.map(v =>
        v!.node!.content,
      ) || [];
      console.log('fetchre', fetchReactions);
      reactions = fetchReactions;
    }
    console.log('networkstat', loading, networkStatus);

    const handleChangeToggle = async (
      event: React.MouseEvent<HTMLElement>,
      newReactions: (keyof typeof ReactionContent)[]) => {
      if (!data) return;
      const add: (keyof typeof ReactionContent)[] = newReactions.filter(v => !reactions.includes(v));
      const remove: (keyof typeof ReactionContent)[] = reactions.filter(v => !newReactions.includes(v));
      // console.log(add, remove);
      if (add.length == 0 && remove.length == 0) return;
      const updateReactions: Promise<any>[] = [];
      add.forEach(v => {
        updateReactions.push(
          (async () => {
            await addReactionMutation({
                variables: { content: ReactionContent[v] },
              },
            );
          })());
      });
      remove.forEach(v => {
        updateReactions.push(
          (async () => await removeReactionMutation({
              variables: { content: ReactionContent[v] },
            },
          ))());
      });
      await Promise.all(updateReactions).then(
        () => {
          refetch();
          console.log('call refetch');
        },
      );
    };

    return (
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name='description' content='Generated by create next app' />
          <link rel='icon' href='/favicon.ico' />
        </Head>

        <main className={styles.main}>
          <ToggleButtonGroup
            color='primary'
            value={reactions}
            onChange={handleChangeToggle}
            aria-label='text formatting'
          >
            <ToggleButton value={'CONFUSED'}>
              CONFUSED
            </ToggleButton>
            <ToggleButton value={'EYES'}>
              EYES
            </ToggleButton>
            <ToggleButton value={'ROCKET'}>
              ROCKET
            </ToggleButton>
            <ToggleButton value={'THUMBS_DOWN'}>
              THUMBS_UP
            </ToggleButton>
            <ToggleButton value={'THUMBS_UP'}>
              THUMBS_DOWN
            </ToggleButton>
          </ToggleButtonGroup>
        </main>

        <footer className={styles.footer}>
          <a
            href='https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
            target='_blank'
            rel='noopener noreferrer'
          >
            Powered by{' '}
            <span className={styles.logo}>
            <Image src='/vercel.svg' alt='Vercel Logo' width={72} height={16} />
          </span>
          </a>
        </footer>
      </div>
    );
  }
;

export default Home;
